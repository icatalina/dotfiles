set nocompatible

let $VIMHOME=expand('<sfile>:p:h')

set diffexpr=MyDiff()
if !exists("*MyDiff")
    function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
        let cmd = '""' . $VIMRUNTIME . '\diff"'
        let eq = '"'
        else
        let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif

""" Plugins in Bundle Folder
execute pathogen#infect()

" prevent vim from adding that stupid empty line at the end of every file
set noeol
set binary

hi SpellErrors guibg=red guifg=black ctermbg=red ctermfg=black

set shell=/bin/bash     " use bash for shell commands
set hidden              " enable multiple modified buffers
set autoread            " automatically read file that has been changed on disk and doesn't have changes in vim
set cinoptions=:0,(s,u0,U1,g0,t0 " some indentation options ':h cinoptions' for details
set autoindent          " automatically indent new line

" Share clipboard
if has('unnamedplus')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" AirLine Configuration
let g:airline_theme='powerlineish'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2
"let g:airline#extensions#tabline#left_sep = ' | '
"let g:airline#extensions#tabline#left_alt_sep = '|'

let NERDTreeIgnore=['\.DS_Store$']

set encoding=utf8
set ffs=unix,dos,mac
set nocp

"" Screen Configuration
set number
set numberwidth=3       " number of culumns for line numbers
set nowrap
set relativenumber

"" History & Undo Level
set history=700
set undolevels=700

"" backup to ~/.tmp
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

filetype off
syntax on
filetype plugin indent on

"" Autoreload vimrc on save
augroup reload_vimrc " {
   autocmd!
   autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

set mouse=a

"" Make Search Case Insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase
set magic

set wildmenu            " enhanced command completion
set visualbell          " use visual bell instead of beeping

"set nofoldenable
set ruler
set cmdheight=2
set hid

set whichwrap+=<,>,h,l

set splitright
set lazyredraw
set showmatch
set mat=2

"" Split
set noesckeys

let base16colorspace=256
 
" Color Scheme
"set term=ansi
set t_Co=256
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
set background=dark

if !empty($BASE16_SHELL)
    colorscheme base16-ocean
else
    colorscheme wombat256mod
endif

" Use 4 tabs and softab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set backspace=indent,eol,start "" Works also with backspace=2
set t_kD=[3;*~
set t_kb=

"" Fix Delete Key
nmap [3;*~ "_x
inoremap [3;*~ <C-O>"_x

so $VIMHOME/ctrlp.vim
so $VIMHOME/filedef.vim
so $VIMHOME/ultisnips.vim

"" YouCompleteMe
let g:ycm_key_list_previous_completion=['<Up>']

"" Mapping
let mapleader = ","
so $VIMHOME/keymaps.vim

autocmd VimEnter * :NERDTreeTabsToggle